name: Terraform Deployment - Dev

on:
  workflow_dispatch:
  push:
    branches:
      - master #for dev configure this to be feature branches
    paths:
      - 'terraform/**'
      - 'src/PingFunctionApp/**'

env:
  ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID_DEV }}"
  ARM_CLIENT_SECRET: "${{ secrets.AZURE_CLIENT_SECRET_DEV }}"
  ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID_DEV }}"
  ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID_DEV }}"
  DOTNET_VERSION: '6.0.x'
  DOTNET_WORKING_DIRECTORY: "src/PingFunctionApp"
  TERRAFORM_WORKING_DIRECTORY: "terraform/environments/dev"

jobs:
  build:
    name: Build and Package Azure Function
    runs-on: ubuntu-latest

    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v3

      - name: Setup DotNet ${{ env.DOTNET_VERSION }} Environment
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Install dependencies
        run: dotnet restore
        working-directory: ${{ env.DOTNET_WORKING_DIRECTORY }}

      - name: Build
        run: dotnet build --configuration Release --no-restore
        working-directory: ${{ env.DOTNET_WORKING_DIRECTORY }}

      - name: Publish
        run: dotnet publish **/PingFunctionApp.csproj -c Release -o ./publish
        working-directory: ${{ env.DOTNET_WORKING_DIRECTORY }}

      - name: Generate Deployment Package
        run: |
          zip -r ../deployment.zip ./
        working-directory: ${{ env.DOTNET_WORKING_DIRECTORY }}/publish

      - name: Upload Deployment Package
        uses: actions/upload-artifact@v2
        with:
          name: function-deployment
          path: ${{ env.DOTNET_WORKING_DIRECTORY }}/deployment.zip

  terraform:
    name: Deploy Terraform Infrastructure
    runs-on: ubuntu-latest
    outputs:
      resource_group_name: ${{ steps.apply.outputs.resource_group_name }}
      function_name: ${{ steps.apply.outputs.function_name }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.7
          terraform_wrapper: false

      - name: Terraform Init
        env:
          BACKEND_RESOURCE_GROUP_NAME: ${{ vars.BACKEND_RESOURCE_GROUP_NAME }}
          BACKEND_STORAGE_ACCOUNT_NAME: ${{ vars.BACKEND_STORAGE_ACCOUNT_NAME }}
          BACKEND_CONTAINER_NAME: ${{ vars.BACKEND_CONTAINER_NAME }}
          BACKEND_TF_STATE_FILE_NAME: ${{ vars.BACKEND_TF_STATE_FILE_NAME }}
        working-directory: ${{ env.TERRAFORM_WORKING_DIRECTORY }}
        run: |
          terraform init \
            -backend-config="resource_group_name=$BACKEND_RESOURCE_GROUP_NAME" \
            -backend-config="storage_account_name=$BACKEND_STORAGE_ACCOUNT_NAME" \
            -backend-config="container_name=$BACKEND_CONTAINER_NAME" \
            -backend-config="key=$BACKEND_TF_STATE_FILE_NAME"

      - name: Terraform Plan
        working-directory: ${{ env.TERRAFORM_WORKING_DIRECTORY }}
        run: terraform plan -out=tfplan

      - id: apply
        name: Terraform Apply
        working-directory: ${{ env.TERRAFORM_WORKING_DIRECTORY }}
        #if: github.ref == 'refs/heads/master' && github.event_name == 'push' && success()
        run: |
          terraform apply tfplan

          resource_group_name=$(terraform output -raw resource_group_name)
          echo $resource_group_name
          echo "resource_group_name=$resource_group_name" >> "$GITHUB_OUTPUT"

          function_name=$(terraform output -raw function_name)
          echo $function_name
          echo "function_name=$function_name" >> "$GITHUB_OUTPUT"
        #env:
        #  TF_VAR_some_variable: ${{ secrets.SOME_VARIABLE }}
        #  pass variables to variables.tf here

  deploy:
    name: Deploy Azure Function App
    needs: [terraform, build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: function-deployment

      - name: Install Azure CLI version
        run: pip install azure-cli=="2.56.0"
        
      - name: Deploy
        env:
          RESOURCE_GROUP_NAME: ${{ needs.terraform.outputs.resource_group_name }}
          FUNCTION_NAME: ${{ needs.terraform.outputs.function_name }}
        run: |
          az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID --output none
          az account set -s $ARM_SUBSCRIPTION_ID --output none
          az functionapp deployment source config-zip -g $RESOURCE_GROUP_NAME -n $FUNCTION_NAME --src ./deployment.zip
        
